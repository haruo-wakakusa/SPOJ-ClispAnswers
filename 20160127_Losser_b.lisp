; SERI07 - Strange But Easy
; http://www.spoj.com/problems/SERI07/

(defconstant +max-integer+ 10000)

(defvar +prime-code+
""
)

(defvar *stream* (make-string-input-stream +prime-code+))

(defvar *series* (make-array +max-integer+))
(setf (aref *series* 0) 11)

(defconstant +code-small-a+ (char-code #\a)) ; 97
(defconstant +code-capital-a+ (char-code #\A)) ; 65
(defun read-code ()
  (let ((c (char-code (read-char *stream*))))
    (if (>= c +code-small-a+)
        (* 2 (- c +code-small-a+))
        (* 2 (+ 26 (- c +code-capital-a+))))))

(let ((p 3))
  (defun read-prime ()
    (incf p (read-code))
    p))

(read-prime) ; 5
(loop for i from 1 below +max-integer+ do
  (setf (aref *series* i) (+ (* (read-prime) (read-prime)) (read-prime))))

(defun string-join (separator seq)
  (let ((s (make-string-output-stream)) (res))
    (prin1 (aref seq 0) s)
    (loop for i from 1 below (length seq) do
      (write-string separator s)
      (prin1 (aref seq i) s))
    (setf res (get-output-stream-string s))
    (close s)
    res))

(defvar *t* (read))
(dotimes (i *t*)
  (format t "~A~%" (string-join " " (subseq *series* 0 (read)))))

