; BULK - The Bulk!
; https://www.spoj.com/problems/BULK/


(defmacro block* (&rest forms)
  (let ((vars nil) (funs nil))
    (dolist (form forms)
      (cond
        ((null form))
        ((atom form))
        ((eq (first form) 'var)
         (do ((rest (rest form) (cddr rest)))
             ((null rest))
           (setq vars (cons (first rest) vars))))
        ((eq (first form) 'fun)
         (setq funs (cons (rest form) funs)))))
    (let ((forms (remove-if (lambda (form) (and (not (atom form))
                                                (eq (first form) 'fun)))
                            forms)))
      (let ((forms (mapcar (lambda (form) (cond ((atom form) form)
                                                ((eq (first form) 'var)
                                                 `(setq ,@(rest form)))
                                                (t form)))
                           forms)))
        `((lambda ()
           (let (,@(mapcar #'list (reverse vars)))
             (labels (,@funs)
               ,@forms))))))))


(defun read-testcase ()
  (loop for nil below (read) collect
    (loop for nil below (read) collect (list (read) (read) (read)))))

(defun is-x-constant (list)
  (every (lambda (p1 p2) (= (first p1) (first p2))) list (rest list)))


(defun solve-testcase (planes)
  (block*

    (var points
      (apply #'append planes))

    (fun is-x-constant (plane)
      (every (lambda (p1 p2) (= (first p1) (first p2))) plane (rest plane)))

    (var //yz-plane
      (
